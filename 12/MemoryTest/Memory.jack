// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */
class Memory {
    static Array ram, freeList;
    static int next, length;

    /** Initializes the class. */
    function void init() {
        var Array heap;

        let ram = 0;
        let heap = 2048;
        let next = 0;
        let length = 1;
        let heap[next] = null; // next available block
        let heap[length] = 14334; // length of block, equal to the rest of the heap (-2)
        let freeList = heap; // freeList initialised to the whole heap
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var Array block, newBlock;

        let block = freeList;

        while ( size > block[length] ) {
            let block = block[next];
            if ( block = null ) {
                do sys.error(6);
            }
        }

        let block[length] = block[length] - (size + 2);
        let newBlock = block + 2 + block[length];
        let newBlock[next] = null;
        let newBlock[length] = size;

        return newBlock + 2;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var Array prevBlock, block, nextBlock;

        let block = o - 2; // get object address
        let prevBlock = freeList;
        let nextBlock = freeList[next];
        while ( ( block > nextBlock ) & (~(nextBlock = null)) ) {
            let prevBlock = nextBlock;
            let nextBlock = nextBlock[next];
        }
        let prevBlock[next] = block;
        let block[next] = nextBlock;

        do Memory.defrag(prevBlock, block, nextBlock);
        return;
    }

    /** De-fragments heap by combining de-allocated block with
     *  previous or next blocks each time de-alloc is called. */
    function void defrag(Array prevBlock, Array block, Array nextBlock) {

        // Combine block with next block if contigious
        if ( (block + 2 + block[length]) = nextBlock ) {
            let block[next] = nextBlock[next];
            let block[length] = block[length] + nextBlock[length] + 2;
        }

        // Combine block with previous block if contigious
        if ( (prevBlock + 2 + prevBlock[length]) = block ) {
            let prevBlock[next] = block[next];
            let prevBlock[length] = prevBlock[length] + block[length] + 2;
        }

        return;
    }
}
