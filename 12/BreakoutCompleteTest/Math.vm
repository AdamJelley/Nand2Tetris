function Math.init 1
push constant 16
pop static 0
push static 0
call Array.new 1
pop static 1
push static 1
push constant 0
add
push constant 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 1
pop local 0
label WHILE_EXP0
push local 0
push static 0
lt
not
if-goto WHILE_END0
push static 1
push local 0
add
push static 1
push local 0
push constant 1
sub
add
pop pointer 1
push that 0
push static 1
push local 0
push constant 1
sub
add
pop pointer 1
push that 0
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Math.bit 0
push argument 0
push static 1
push argument 1
add
pop pointer 1
push that 0
and
push constant 0
eq
not
return
function Math.multiply 3
push constant 0
pop local 0
push argument 0
pop local 1
push constant 0
pop local 2
label WHILE_EXP1
push local 2
push static 0
lt
not
if-goto WHILE_END1
push argument 1
push local 2
call Math.bit 2
not
if-goto IF_FALSE0
push local 0
push local 1
add
pop local 0
goto IF_TRUE0
label IF_FALSE0
label IF_TRUE0
push local 1
push local 1
add
pop local 1
push local 2
push constant 1
add
pop local 2
goto WHILE_EXP1
label WHILE_END1
push local 0
return
function Math.divide 6
push argument 1
push constant 0
eq
not
if-goto IF_FALSE1
push constant 3
call Sys.error 1
pop temp 0
goto IF_TRUE1
label IF_FALSE1
label IF_TRUE1
push argument 0
call Math.abs 1
pop local 1
push argument 1
call Math.abs 1
pop local 2
push argument 0
push constant 0
lt
pop local 3
push argument 1
push constant 0
lt
pop local 4
push local 3
push local 4
eq
not
if-goto IF_FALSE2
push constant 1
pop local 5
goto IF_TRUE2
label IF_FALSE2
push constant 1
neg
pop local 5
label IF_TRUE2
push local 2
push local 1
gt
not
if-goto IF_FALSE3
push constant 0
return
goto IF_TRUE3
label IF_FALSE3
label IF_TRUE3
push local 1
push local 2
push local 2
add
call Math.divide 2
pop local 0
push local 1
push constant 2
push local 0
call Math.multiply 2
push local 2
call Math.multiply 2
sub
push local 2
lt
not
if-goto IF_FALSE4
push local 5
push constant 2
call Math.multiply 2
push local 0
call Math.multiply 2
return
goto IF_TRUE4
label IF_FALSE4
label IF_TRUE4
push local 5
push constant 2
push local 0
call Math.multiply 2
push constant 1
add
call Math.multiply 2
return
function Math.sqrt 4
push argument 0
push constant 0
lt
not
if-goto IF_FALSE5
push constant 4
call Sys.error 1
pop temp 0
goto IF_TRUE5
label IF_FALSE5
label IF_TRUE5
push constant 0
pop local 1
push static 0
push constant 2
call Math.divide 2
push constant 1
sub
pop local 0
label WHILE_EXP2
push local 0
push constant 0
lt
not
not
if-goto WHILE_END2
push local 1
push static 1
push local 0
add
pop pointer 1
push that 0
add
pop local 2
push local 2
push local 2
call Math.multiply 2
pop local 3
push local 3
push argument 0
gt
not
push local 3
push constant 0
gt
and
not
if-goto IF_FALSE6
push local 2
pop local 1
goto IF_TRUE6
label IF_FALSE6
label IF_TRUE6
push local 0
push constant 1
sub
pop local 0
goto WHILE_EXP2
label WHILE_END2
push local 1
return
function Math.max 0
push argument 0
push argument 1
gt
not
if-goto IF_FALSE7
push argument 0
return
goto IF_TRUE7
label IF_FALSE7
label IF_TRUE7
push argument 1
return
function Math.min 0
push argument 0
push argument 1
lt
not
if-goto IF_FALSE8
push argument 0
return
goto IF_TRUE8
label IF_FALSE8
label IF_TRUE8
push argument 1
return
function Math.abs 0
push argument 0
push constant 0
lt
not
if-goto IF_FALSE9
push argument 0
neg
return
goto IF_TRUE9
label IF_FALSE9
label IF_TRUE9
push argument 0
return
