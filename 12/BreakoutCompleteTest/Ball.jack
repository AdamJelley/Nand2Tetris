/**
 * A graphical ball in a Breakout game.
 * Had methods for drawing, erasing and moving.
 * The ball is displayed as a filled 6x6 rectangle.
 */
class Ball {

    field int x, y;     // Location (in pixels)
    field int size;     // Ball size
    field int speed;    // Ball speed
    field int wall;     // Last wall ball bounced from
                        // (0 = None, 1 = Left, 2 = Right, 3 = Top, 4 = Bottom)
    field int destx, desty, prevDestx, prevDesty; // Next and previous trajectory destinations
    field int dx, dy;   // Difference between dests and prev dests

    /** Constructs a new ball with the given initial location and wall locations. */
    constructor Ball new(int Ax, int Ay) {
        let x = Ax;
        let y = Ay;
        let size = 6;
        let speed = 3;
        let prevDestx = Ax;
        let prevDesty = Ay;
        let wall = 0;
        do show();
        return this;
    }

    /** Deallocates the ball's memory. */
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    /** Shows the ball. */
    method void show() {
        do Screen.setColor(true);
        do draw();
        return;
    }

    /** Hides the ball. */
    method void hide() {
        do Screen.setColor(false);
        do draw();
        return;
    }

    /** Draws the ball. */
    method void draw() {
        do Screen.drawRectangle(x, y, x + size, y + size);
        return;
    }

    /** Sets the ball's destination. */
    method void setDestination(int Adestx, int Adesty) {
        let destx = Adestx;
        let desty = Adesty;
        let dx = destx - x;
        let dy = desty - y;
        return;
    }

    /** Gets the ball's left edge. */
    method int getLeft() {
        return x;
    }

    /** Gets the ball's right edge. */
    method int getRight() {
        return x + size;
    }

    /** Gets the ball's top edge. */
    method int getTop() {
        return y;
    }

    /** Gets the ball's bottom edge. */
    method int getBottom() {
        return y + size;
    }

    /** Gets the ball's size. */
    method int getSize() {
        return size;
    }

    method void setX(int Ax) {
        let x = Ax;
        return;
    }

    method void setY(int Ay) {
        let y = Ay;
        return;
    }

    method void increaseSpeed(int increment) {
        let speed = speed + increment;
        return;
    }

    /**
     * Moves the ball one step towards its destination.
     */
     method Array move() {
        var int absdx, absdy;
        var Array pos;

        let pos = Array.new(2);

        let absdx = Math.abs(dx);
        let absdy = Math.abs(dy);

        if ((dx > 0) & (dy > 0)) {
            if (absdx > absdy) {
                let y = y + speed;
                let x = x + ((absdx * speed) / absdy);
            }
            else {
                let x = x + speed;
                let y = y + ((absdy * speed) / absdx);
            }
        }
        if ((dx > 0) & (dy < 0)) {
            if (absdx > absdy) {
                let y = y - speed;
                let x = x + ((absdx * speed) / absdy);
            }
            else {
                let x = x + speed;
                let y = y - ((absdy * speed) / absdx);
            }
        }
        if ((dx < 0) & (dy > 0)) {
            if (absdx > absdy) {
                let y = y + speed;
                let x = x - ((absdx * speed) / absdy);
            }
            else {
                let x = x - speed;
                let y = y + ((absdy * speed) / absdx);
            }
        }
        if ((dx < 0) & (dy < 0)) {
            if (absdx > absdy) {
                let y = y - speed;
                let x = x - ((absdx * speed) / absdy);
            }
            else {
                let x = x - speed;
                let y = y - ((absdy * speed) / absdx);
            }
        }

        let pos[0] = x;
        let pos[1] = y;

        return pos;
     }

     method void bounce(int wall) {

        if ((wall = 1) | (wall = 2)) {
            let desty = 2 * y - prevDesty;
            let prevDesty = y;
            let destx = prevDestx;
            let prevDestx = x;
        }
        if ((wall = 3) | (wall = 4)) {
            let destx = 2 * x - prevDestx;
            let prevDestx = x;
            let desty = prevDesty;
            let prevDesty = y;
        }
        if (wall = 5) { // Inside brick!
            let destx = 2 * x - prevDestx;
            let prevDestx = x;
            let desty = prevDesty;
            let prevDesty = y;
        }

        let dx = destx - x;
        let dy = desty - y;

        if ( dy = 0 ) { 
            let dx = -5;
            let dy = 10; 
            }

        return;
     }
}