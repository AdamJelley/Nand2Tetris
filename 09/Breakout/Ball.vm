function Ball.new 0
push constant 14
call Memory.alloc 1
pop pointer 0
push argument 0
pop this 0
push argument 1
pop this 1
push constant 5
pop this 2
push argument 0
pop this 10
push argument 1
pop this 11
push argument 2
pop this 3
push argument 3
push this 2
sub
push constant 1
sub
pop this 4
push argument 4
pop this 5
push argument 5
push this 2
sub
push constant 1
sub
pop this 6
push constant 0
pop this 7
push pointer 0
call Ball.show 1
pop temp 0
push pointer 0
return
function Ball.dispose 0
push argument 0
pop pointer 0
push pointer 0
call Memory.deAlloc 1
pop temp 0
push constant 0
return
function Ball.show 0
push argument 0
pop pointer 0
push constant 0
not
call Screen.setColor 1
pop temp 0
push pointer 0
call Ball.draw 1
pop temp 0
push constant 0
return
function Ball.hide 0
push argument 0
pop pointer 0
push constant 0
call Screen.setColor 1
pop temp 0
push pointer 0
call Ball.draw 1
pop temp 0
push constant 0
return
function Ball.draw 0
push argument 0
pop pointer 0
push this 0
push this 1
push this 0
push this 2
add
push this 1
push this 2
add
call Screen.drawRectangle 4
pop temp 0
push constant 0
return
function Ball.setDestination 0
push argument 0
pop pointer 0
push argument 1
pop this 8
push argument 2
pop this 9
push this 8
push this 0
sub
pop this 12
push this 9
push this 1
sub
pop this 13
push constant 0
return
function Ball.getLeft 0
push argument 0
pop pointer 0
push this 0
return
function Ball.getRight 0
push argument 0
pop pointer 0
push this 0
push this 2
add
return
function Ball.move 2
push argument 0
pop pointer 0
push pointer 0
call Ball.hide 1
pop temp 0
push this 12
call Math.abs 1
pop local 0
push this 13
call Math.abs 1
pop local 1
push this 12
push constant 0
gt
push this 13
push constant 0
gt
and
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 0
push local 1
gt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push this 1
push constant 4
add
pop this 1
push this 0
push local 0
push constant 4
call Math.multiply 2
push local 1
call Math.divide 2
add
pop this 0
goto IF_END1
label IF_FALSE1
push this 0
push constant 4
add
pop this 0
push this 1
push local 1
push constant 4
call Math.multiply 2
push local 0
call Math.divide 2
add
pop this 1
label IF_END1
label IF_FALSE0
push this 12
push constant 0
gt
push this 13
push constant 0
lt
and
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push local 0
push local 1
gt
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push this 1
push constant 4
sub
pop this 1
push this 0
push local 0
push constant 4
call Math.multiply 2
push local 1
call Math.divide 2
add
pop this 0
goto IF_END3
label IF_FALSE3
push this 0
push constant 4
add
pop this 0
push this 1
push local 1
push constant 4
call Math.multiply 2
push local 0
call Math.divide 2
sub
pop this 1
label IF_END3
label IF_FALSE2
push this 12
push constant 0
lt
push this 13
push constant 0
gt
and
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push local 0
push local 1
gt
if-goto IF_TRUE5
goto IF_FALSE5
label IF_TRUE5
push this 1
push constant 4
add
pop this 1
push this 0
push local 0
push constant 4
call Math.multiply 2
push local 1
call Math.divide 2
sub
pop this 0
goto IF_END5
label IF_FALSE5
push this 0
push constant 4
sub
pop this 0
push this 1
push local 1
push constant 4
call Math.multiply 2
push local 0
call Math.divide 2
add
pop this 1
label IF_END5
label IF_FALSE4
push this 12
push constant 0
lt
push this 13
push constant 0
lt
and
if-goto IF_TRUE6
goto IF_FALSE6
label IF_TRUE6
push local 0
push local 1
gt
if-goto IF_TRUE7
goto IF_FALSE7
label IF_TRUE7
push this 1
push constant 4
sub
pop this 1
push this 0
push local 0
push constant 4
call Math.multiply 2
push local 1
call Math.divide 2
sub
pop this 0
goto IF_END7
label IF_FALSE7
push this 0
push constant 4
sub
pop this 0
push this 1
push local 1
push constant 4
call Math.multiply 2
push local 0
call Math.divide 2
sub
pop this 1
label IF_END7
label IF_FALSE6
push this 0
push this 3
gt
not
if-goto IF_TRUE8
goto IF_FALSE8
label IF_TRUE8
push constant 1
pop this 7
push this 3
pop this 0
label IF_FALSE8
push this 0
push this 4
lt
not
if-goto IF_TRUE9
goto IF_FALSE9
label IF_TRUE9
push constant 2
pop this 7
push this 4
pop this 0
label IF_FALSE9
push this 1
push this 5
gt
not
if-goto IF_TRUE10
goto IF_FALSE10
label IF_TRUE10
push constant 3
pop this 7
push this 5
pop this 1
label IF_FALSE10
push this 1
push this 6
lt
not
if-goto IF_TRUE11
goto IF_FALSE11
label IF_TRUE11
push constant 4
pop this 7
push this 6
pop this 1
label IF_FALSE11
push pointer 0
call Ball.show 1
pop temp 0
push this 7
return
function Ball.bounce 0
push argument 0
pop pointer 0
push this 7
push constant 1
eq
push this 7
push constant 2
eq
or
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 2
push this 1
call Math.multiply 2
push this 11
sub
pop this 9
push this 1
pop this 11
push this 10
pop this 8
push this 0
pop this 10
label IF_FALSE0
push this 7
push constant 3
eq
push this 7
push constant 4
eq
or
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 2
push this 0
call Math.multiply 2
push this 10
sub
pop this 8
push this 0
pop this 10
push this 11
pop this 9
push this 1
pop this 11
label IF_FALSE1
push this 8
push this 0
sub
pop this 12
push this 9
push this 1
sub
pop this 13
push constant 0
return
