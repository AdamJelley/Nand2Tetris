/**
 * Represents a Breakout game.
 */
class BreakoutGame {

    field Ball ball;            // ball
    field Paddle paddle;        // paddle
    field int paddleWidth;      // width of paddle
    field int wall;             // current wall the ball is bouncing off
    field int lastWall;         // last wall the ball bounced from
    field int score;            // current game score
    field boolean exit;         // true when the game is over

    /* Constructs a new Breakout game. */
    constructor BreakoutGame new() {
        do Screen.clearScreen();
        let paddleWidth = 40;  // initial paddle size
        let paddle = Paddle.new(230, 248, paddleWidth, 7);
        let ball = Ball.new(253, 240, 13, 499, 28, 248);
        do ball.setDestination(400, 0);
        do Screen.drawRectangle(0, 15, 511, 27);
        do Screen.drawRectangle(0, 28 , 12, 255);
        do Screen.drawRectangle(499, 28 , 511, 255);
        let lastWall = 0;
        let score = 0;
        let exit = false;

        do Output.moveCursor(0,28);
        do Output.printString("Score: 0");

        return this;
    }

    /** Deallocates the object's memory. */
    method void dispose() {
        do paddle.dispose();
        do ball.dispose();
        do Memory.deAlloc(this);
        return;
    }

    /** Starts the game, and handles input from the user that
     * controls the paddle's movement direction.
     */
    method void run() {
        var char key;

        while (~exit) {
            // waits for a key to be pressed
            while ((key = 0) & (~exit)) {
                let key = Keyboard.keyPressed();
                do paddle.move();
                do moveBall();
                do Sys.wait(50);
            }

            if (key = 130) { do paddle.setDirection(1); }
            else {
                if (key = 132) { do paddle.setDirection(2); }
                else {
                    if ((key = 131) | (key = 133)) { do paddle.setDirection(0); }
                    else {
                        if (key = 140) { let exit = true; }
                    }
                }
            }

            // Waits for the key to be released.
            while ((~(key = 0)) & (~exit)) {
                let key = Keyboard.keyPressed();
                do paddle.move();
                do moveBall();
                do Sys.wait(50);
            }
        }

        if (exit) {
            do Output.moveCursor(11,27);
            do Output.printString("Game Over!");
            do Output.moveCursor(13,25);
            do Output.printString("Final Score: ");
            do Output.moveCursor(13,38);
            do Output.printInt(score);
        }
        return;
    }

    /** Handles ball movement, including bouncing.
      * If the ball bounces off a wall, calculate its new destination.
      * End the game if the ball misses the paddle.
      */
    method void moveBall() {
        //var int batLeft, batRight, ballLeft, ballRight;

        let wall = ball.move();

        if ((wall > 0) & (~(wall = lastWall))) {
            if (wall = 4) {
                let exit = ((paddle.getLeft() > ball.getRight()) | (paddle.getRight() < ball.getLeft()));
                if (~exit) {
                    let score = score + 1;
                    do Output.moveCursor(0, 35);
                    do Output.printInt(score);
                }
                else {
                    do ball.hide();
                }
            }
            do ball.bounce();
            let lastWall = wall;
        }

        return;
    }
}