// Bootstrap code
@256
D=A
@SP
M=D
//call Sys.init 0
// push
@Sys.init$ret.0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
// push
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
// push
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// push
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@0
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.init
0;JMP
(Sys.init$ret.0)
//function Main.fibonacci 0
(Main.fibonacci)
// push
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// push
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@TRUE_0
D;JLT
@SP
A=M-1
M=0
(TRUE_0)
// if-goto
@SP
AM=M-1
D=M
@N_LT_2
D;JNE
D;JGT
@N_GE_2
0;JMP
(N_LT_2)
// push
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//return
@LCL
D=M
@R13
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R13
AM=M-1
D=M
@THAT
M=D
@R13
AM=M-1
D=M
@THIS
M=D
@R13
AM=M-1
D=M
@ARG
M=D
@R13
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
(N_GE_2)
// push
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// push
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//call Main.fibonacci 1
// push
@Main.fibonacci$ret.0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
// push
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
// push
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// push
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(Main.fibonacci$ret.0)
// push
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// push
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//call Main.fibonacci 1
// push
@Main.fibonacci$ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
// push
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
// push
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
// push
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// push
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(Main.fibonacci$ret.1)
// add
@SP
AM=M-1
D=M
A=A-1
M=D+M
//return
@LCL
D=M
@R13
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R13
AM=M-1
D=M
@THAT
M=D
@R13
AM=M-1
D=M
@THIS
M=D
@R13
AM=M-1
D=M
@ARG
M=D
@R13
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
//function Sys.init 0
(Sys.init)
// push
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
//call Main.fibonacci 1
// push
@Main.fibonacci$ret.2
D=A
@SP
A=M
M=D
@SP
M=M+1
// push
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
// push
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
// push
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// push
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(Main.fibonacci$ret.2)
(END)
@END
0;JMP
